class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        int dp[] = new int[365];
       return calculateMinCost(days, costs, 0, dp);
    }
    
    
    public int calculateMinCost(int[] days, int[] costs, int currentDay, int dp[]) {
        
        if(dp[currentDay] != 0) {
            return dp[currentDay];
        }
        
        if(currentDay == days.length - 1) {
            return Math.min(costs[0], Math.min(costs[1], costs[2]));    
        }
        
        if(currentDay > days.length - 1) {
            return 0;    
        }
        
        int costForOneDayTicket = costs[0] + calculateMinCost(days, costs, currentDay + 1, dp);
        int costFor7DayTicket = costs[1] + calculateMinCost(days, costs, findNextDay(days, currentDay, 7), dp);
        int costFor30DayTicket = costs[2] + calculateMinCost(days, costs, findNextDay(days, currentDay, 30), dp);
        
        dp[currentDay] = Math.min(costForOneDayTicket, Math.min(costFor7DayTicket, costFor30DayTicket));
        
        return dp[currentDay];
    }
    
    public int findNextDay(int[] days, int currentDay, int ticketForDays) {
        int maxNextDayValue = days[currentDay] + ticketForDays - 1;
        
        int c = 1;
        
        int nextDay = currentDay;
        
        while(c <= ticketForDays && currentDay+c < days.length && days[currentDay+c] <= maxNextDayValue) {
            nextDay = currentDay + c;
            c++;
        } 
        
        return nextDay + 1;
        
    }
}